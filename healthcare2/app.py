import streamlit as st
import pandas as pd
from langchain_ollama.llms import OllamaLLM as Ollama
import os
import json
import re
import speech_recognition as sr
import io
import warnings
from deep_translator import GoogleTranslator

# Suppress a specific warning from the audio library
warnings.filterwarnings("ignore", message="PySoundFile failed. Trying audioread instead.")

# --- 1. SETUP AND INITIALIZATION ---

st.set_page_config(page_title="HealthCare ChatBot", layout="wide")

# --- PRE-TRANSLATED STATIC TEXTS ---
translations = {
    "en": {
        "title": "AI-Powered Medical Assistant", "write": "Before we begin, please provide some information about yourself in the sidebar.",
        "sidebar_your_info": "Your Information", "age": "Age", "gender": "Gender",
        "gender_options": ["Not specified", "Male", "Female", "Other"], "sidebar_filters": "Filter Options",
        "insurance_checkbox": "Show only doctors who accept insurance", "sidebar_find_doctor": "Find a Doctor",
        "location_select": "Select Location(s)", "find_doctors_button": "Find Doctors",
        "sidebar_voice_input": "Voice Input", "voice_language_select": "Select Language for Voice",
        "health_corner": "Health Corner", "health_tip": "ЁЯТб Health Tip:", "next_tip_button": "Next Tip",
        "emergency_button": "ЁЯЪС Emergency Contacts", "emergency_info": "Nearest Emergency Numbers:\n\n- ЁЯЪи Ambulance: 108 \n- тШО Police: 100",
        "download_chat_button": "ЁЯТ╛ Download Chat History", "init_spinner": "Initializing the chatbot...",
        "init_toast": "Chatbot is ready!", "initial_message": "Hello! After entering your details, please describe your symptoms.",
        "symptoms_placeholder": "Tell me your symptoms...", "follow_up_placeholder": "Ask a follow-up question or enter new symptoms...",
        "analysis_spinner": "Analyzing your symptoms...", "thinking_spinner": "Thinking...",
        "follow_up_response": "You can now ask a follow-up question, or select a location from the sidebar and click *Find Doctors*.",
        "new_symptoms_info": "It looks like you're describing new symptoms. I will start a new analysis.",
        "new_symptoms_response": "You can now ask a follow-up question, or find a doctor using the sidebar.",
        "listening_info": "Listening in LANG... Speak now!", "transcribing_spinner": "Transcribing your voice...",
        "listening_timeout_warning": "Listening timed out. Please try again.", "whisper_error_toast": "Whisper could not understand the audio.",
        "voice_error": "An error occurred during transcription: ERROR_MESSAGE", "toast_symptoms_first": "Please describe your symptoms in the chat first.",
        "toast_location_first": "Please select at least one location from the sidebar.",
        "search_spinner": "Searching for SPECIALIZATIONs in LOCATIONS...",
        "search_results_ok": "Okay, here are some *SPECIALIZATIONs* in *LOCATIONS*:",
        "search_results_fail": "I'm sorry, I couldn't find any *SPECIALIZATIONs* in the selected locations matching your criteria. Please try different areas or filters.",
        "disclaimer": "Disclaimer: This is not a medical diagnosis.",
        "tip_1": "ЁЯТз Stay hydrated and drink at least 2L of water daily.", "tip_2": "ЁЯШ┤ Get 7тАУ8 hours of sleep for a healthy immune system.",
        "tip_3": "ЁЯПГтАНтЩА Exercise at least 30 minutes, 5 days a week.", "tip_4": "ЁЯз╝ Wash hands frequently to prevent infections.",
        "tip_5": "ЁЯеЧ Eat more fruits and vegetables to boost immunity.", "tip_6": "ЁЯЪн Avoid smoking and limit alcohol consumption.",
        "tip_7": "ЁЯзШтАНтЩА Practice stress management techniques like meditation.", "tip_8": "тША Get adequate sunlight for vitamin D synthesis.",
        "tip_9": "ЁЯПе Have regular health check-ups and screenings.", "tip_10": "ЁЯТК Take medications as prescribed by your doctor.",
        "doc_hospital": "Hospital/Clinic", "doc_qualifications": "Qualifications", "doc_availability": "Availability", "doc_contact": "Contact"
    },
    "hi": {
        "title": "рд╣реЗрд▓реНрдердХреЗрдпрд░ рдЪреИрдЯрдмреЙрдЯ ЁЯзСЁЯП╜тАНтЪХ", "subheader": "рез. рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВред реи. рд▓рдХреНрд╖рдг рдмрддрд╛рдПрдВред рей. рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ рдпрд╛ рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬреЗрдВред",
        "sidebar_your_info": "рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА", "age": "рдЖрдпреБ", "gender": "рд▓рд┐рдВрдЧ", "gender_options": ["рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдирд╣реАрдВ", "рдкреБрд░реБрд╖", "рдорд╣рд┐рд▓рд╛", "рдЕрдиреНрдп"],
        "sidebar_filters": "рдлрд╝рд┐рд▓реНрдЯрд░ рд╡рд┐рдХрд▓реНрдк", "insurance_checkbox": "рдХреЗрд╡рд▓ рдмреАрдорд╛ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдбреЙрдХреНрдЯрд░ рджрд┐рдЦрд╛рдПрдВ",
        "sidebar_find_doctor": "рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬреЗрдВ", "location_select": "рд╕реНрдерд╛рди рдЪреБрдиреЗрдВ", "find_doctors_button": "рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬреЗрдВ",
        "sidebar_voice_input": "рдЖрд╡рд╛рдЬ рдЗрдирдкреБрдЯ", "voice_language_select": "рдЖрд╡рд╛рдЬ рдХреЗ рд▓рд┐рдП рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", "health_corner": "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЙрд░реНрдирд░",
        "health_tip": "ЁЯТб рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реБрдЭрд╛рд╡:", "next_tip_button": "рдЕрдЧрд▓рд╛ рд╕реБрдЭрд╛рд╡", "emergency_button": "ЁЯЪС рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ",
        "emergency_info": "рдирд┐рдХрдЯрддрдо рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдирдВрдмрд░:\n\n- ЁЯЪи рдПрдореНрдмреБрд▓реЗрдВрд╕: 108 \n- тШО рдкреБрд▓рд┐рд╕: 100",
        "download_chat_button": "ЁЯТ╛ рдЪреИрдЯ рдЗрддрд┐рд╣рд╛рд╕ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ", "init_spinner": "рдЪреИрдЯрдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...", "init_toast": "рдЪреИрдЯрдмреЙрдЯ рддреИрдпрд╛рд░ рд╣реИ!",
        "initial_message": "рдирдорд╕реНрддреЗ! рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рджрд░реНрдЬ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж, рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рдмрддрд╛рдПрдВред", "symptoms_placeholder": "рдореБрдЭреЗ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рдмрддрд╛рдПрдВ...",
        "follow_up_placeholder": "рдПрдХ рдФрд░ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ рдпрд╛ рдирдП рд▓рдХреНрд╖рдг рджрд░реНрдЬ рдХрд░реЗрдВ...", "analysis_spinner": "рдЖрдкрдХреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
        "thinking_spinner": "рд╕реЛрдЪ рд░рд╣рд╛ рд╣реВрдБ...", "follow_up_response": "рдЕрдм рдЖрдк рдПрдХ рдФрд░ рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ, рдпрд╛ рд╕рд╛рдЗрдбрдмрд╛рд░ рд╕реЗ рдПрдХ рд╕реНрдерд╛рди рдЪреБрдирдХрд░ *рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬреЗрдВ* рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
        "new_symptoms_info": "рд▓рдЧрддрд╛ рд╣реИ рдЖрдк рдирдП рд▓рдХреНрд╖рдг рдмрддрд╛ рд░рд╣реЗ рд╣реИрдВред рдореИрдВ рдПрдХ рдирдпрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╢реБрд░реВ рдХрд░реВрдВрдЧрд╛ред", "new_symptoms_response": "рдЕрдм рдЖрдк рдПрдХ рдФрд░ рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ, рдпрд╛ рд╕рд╛рдЗрдбрдмрд╛рд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬ рд╕рдХрддреЗ рд╣реИрдВред",
        "listening_info": "LANG рдореЗрдВ рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ... рдЕрдм рдмреЛрд▓реЗрдВ!", "transcribing_spinner": "рдЖрдкрдХреА рдЖрд╡рд╛рдЬ рдХреЛ рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд╛рдЗрдм рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...",
        "listening_timeout_warning": "рд╕реБрдирдиреЗ рдХрд╛ рд╕рдордп рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред", "whisper_error_toast": "рд╡реНрд╣рд┐рд╕реНрдкрд░ рдСрдбрд┐рдпреЛ рдХреЛ рд╕рдордЭ рдирд╣реАрдВ рд╕рдХрд╛ред",
        "voice_error": "рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрд╢рди рдХреЗ рджреМрд░рд╛рди рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: ERROR_MESSAGE", "toast_symptoms_first": "рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдЪреИрдЯ рдореЗрдВ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рдмрддрд╛рдПрдВред",
        "toast_location_first": "рдХреГрдкрдпрд╛ рд╕рд╛рдЗрдбрдмрд╛рд░ рд╕реЗ рдХрдо рд╕реЗ рдХрдо рдПрдХ рд╕реНрдерд╛рди рдЪреБрдиреЗрдВред", "search_spinner": "LOCATIONS рдореЗрдВ SPECIALIZATIONs рдЦреЛрдЬ рд░рд╣рд╛ рд╣реВрдБ...",
        "search_results_ok": "рдареАрдХ рд╣реИ, рдпрд╣рд╛рдБ LOCATIONS рдореЗрдВ рдХреБрдЫ *SPECIALIZATIONs* рд╣реИрдВ:", "search_results_fail": "рдорд╛рдлрд╝ рдХрд░реЗрдВ, рдореБрдЭреЗ рдЖрдкрдХреЗ рдорд╛рдирджрдВрдбреЛрдВ рд╕реЗ рдореЗрд▓ рдЦрд╛рдиреЗ рд╡рд╛рд▓реЗ рдЪрдпрдирд┐рдд рд╕реНрдерд╛рдиреЛрдВ рдореЗрдВ рдХреЛрдИ *SPECIALIZATIONs* рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рджреВрд╕рд░реЗ рдХреНрд╖реЗрддреНрд░ рдпрд╛ рдлрд╝рд┐рд▓реНрдЯрд░ рдЖрдЬрд╝рдорд╛рдПрдБред",
        "disclaimer": "рдЕрд╕реНрд╡реАрдХрд░рдг: рдпрд╣ рдПрдХ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдирд┐рджрд╛рди рдирд╣реАрдВ рд╣реИред", "tip_1": "ЁЯТз рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ рдФрд░ рд░реЛрдЬрд╛рдирд╛ рдХрдо рд╕реЗ рдХрдо 2 рд▓реАрдЯрд░ рдкрд╛рдиреА рдкрд┐рдПрдВред",
        "tip_2": "ЁЯШ┤ рд╕реНрд╡рд╕реНрде рдкреНрд░рддрд┐рд░рдХреНрд╖рд╛ рдкреНрд░рдгрд╛рд▓реА рдХреЗ рд▓рд┐рдП 7-8 рдШрдВрдЯреЗ рдХреА рдиреАрдВрдж рд▓реЗрдВред", "tip_3": "ЁЯПГтАНтЩА рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 5 рджрд┐рди рдХрдо рд╕реЗ рдХрдо 30 рдорд┐рдирдЯ рд╡реНрдпрд╛рдпрд╛рдо рдХрд░реЗрдВред",
        "tip_4": "ЁЯз╝ рд╕рдВрдХреНрд░рдордг рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╛рд░-рдмрд╛рд░ рд╣рд╛рде рдзреЛрдПрдВред", "tip_5": "ЁЯеЧ рд░реЛрдЧ рдкреНрд░рддрд┐рд░реЛрдзрдХ рдХреНрд╖рдорддрд╛ рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдзрд┐рдХ рдлрд▓ рдФрд░ рд╕рдмреНрдЬрд┐рдпрд╛рдВ рдЦрд╛рдПрдВред",
        "tip_6": "ЁЯЪн рдзреВрдореНрд░рдкрд╛рди рд╕реЗ рдмрдЪреЗрдВ рдФрд░ рд╢рд░рд╛рдм рдХрд╛ рд╕реЗрд╡рди рд╕реАрдорд┐рдд рдХрд░реЗрдВред", "tip_7": "ЁЯзШтАНтЩА рдзреНрдпрд╛рди рдЬреИрд╕реА рддрдирд╛рд╡ рдкреНрд░рдмрдВрдзрди рддрдХрдиреАрдХреЛрдВ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВред",
        "tip_8": "тША рд╡рд┐рдЯрд╛рдорд┐рди рдбреА рд╕рдВрд╢реНрд▓реЗрд╖рдг рдХреЗ рд▓рд┐рдП рдкрд░реНрдпрд╛рдкреНрдд рдзреВрдк рд▓реЗрдВред", "tip_9": "ЁЯПе рдирд┐рдпрдорд┐рдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдВрдЪ рдФрд░ рд╕реНрдХреНрд░реАрдирд┐рдВрдЧ рдХрд░рд╛рдПрдВред",
        "tip_10": "ЁЯТК рдЕрдкрдиреЗ рдбреЙрдХреНрдЯрд░ рджреНрд╡рд╛рд░рд╛ рдмрддрд╛рдИ рдЧрдИ рджрд╡рд╛рдПрдВ рд▓реЗрдВред", "doc_hospital": "рдЕрд╕реНрдкрддрд╛рд▓/рдХреНрд▓рд┐рдирд┐рдХ", "doc_qualifications": "рдпреЛрдЧреНрдпрддрд╛",
        "doc_availability": "рдЙрдкрд▓рдмреНрдзрддрд╛", "doc_contact": "рд╕рдВрдкрд░реНрдХ"
    },
    "mr": {
        "title": "рдЖрд░реЛрдЧреНрдп рдЪреЕрдЯрдмреЙрдЯ ЁЯзСЁЯП╜тАНтЪХ", "subheader": "рез. рддрдкрд╢реАрд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛. реи. рд▓рдХреНрд╖рдг рд╕рд╛рдВрдЧрд╛. рей. рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛ рдХрд┐рдВрд╡рд╛ рдбреЙрдХреНрдЯрд░ рд╢реЛрдзрд╛.",
        "sidebar_your_info": "рддреБрдордЪреА рдорд╛рд╣рд┐рддреА", "age": "рд╡рдп", "gender": "рд▓рд┐рдВрдЧ", "gender_options": ["рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдирд╛рд╣реА", "рдкреБрд░реБрд╖", "рд╕реНрддреНрд░реА", "рдЗрддрд░"],
        "sidebar_filters": "рдлрд┐рд▓реНрдЯрд░ рдкрд░реНрдпрд╛рдп", "insurance_checkbox": "рдлрдХреНрдд рд╡рд┐рдорд╛ рд╕реНрд╡реАрдХрд╛рд░рдгрд╛рд░реЗ рдбреЙрдХреНрдЯрд░ рджрд╛рдЦрд╡рд╛", "sidebar_find_doctor": "рдбреЙрдХреНрдЯрд░ рд╢реЛрдзрд╛",
        "location_select": "рд╕реНрдерд╛рди рдирд┐рд╡рдбрд╛", "find_doctors_button": "рдбреЙрдХреНрдЯрд░ рд╢реЛрдзрд╛", "sidebar_voice_input": "рд╡реНрд╣реЙрдЗрд╕ рдЗрдирдкреБрдЯ",
        "voice_language_select": "рдЖрд╡рд╛рдЬрд╛рд╕рд╛рдареА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛", "health_corner": "рдЖрд░реЛрдЧреНрдп рдХреЛрдкрд░рд╛", "health_tip": "ЁЯТб рдЖрд░реЛрдЧреНрдп рдЯреАрдк:",
        "next_tip_button": "рдкреБрдвреАрд▓ рдЯреАрдк", "emergency_button": "ЁЯЪС рдЖрдкрддреНрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ",
        "emergency_info": "рдЬрд╡рд│рдЪреЗ рдЖрдкрддреНрдХрд╛рд▓реАрди рдХреНрд░рдорд╛рдВрдХ:\n\n- ЁЯЪи рд░реБрдЧреНрдгрд╡рд╛рд╣рд┐рдХрд╛: резрежрео \n- тШО рдкреЛрд▓реАрд╕: резрежреж",
        "download_chat_button": "ЁЯТ╛ рдЪреЕрдЯ рдЗрддрд┐рд╣рд╛рд╕ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рд╛", "init_spinner": "рдЪреЕрдЯрдмреЙрдЯ рд╕реБрд░реВ рд╣реЛрдд рдЖрд╣реЗ...", "init_toast": "рдЪреЕрдЯрдмреЙрдЯ рддрдпрд╛рд░ рдЖрд╣реЗ!",
        "initial_message": "рдирдорд╕реНрдХрд╛рд░! рддреБрдордЪрд╛ рддрдкрд╢реАрд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХреЗрд▓реНрдпрд╛рдирдВрддрд░, рдХреГрдкрдпрд╛ рддреБрдордЪреА рд▓рдХреНрд╖рдгреЗ рд╕рд╛рдВрдЧрд╛.", "symptoms_placeholder": "рдорд▓рд╛ рддреБрдордЪреА рд▓рдХреНрд╖рдгреЗ рд╕рд╛рдВрдЧрд╛...",
        "follow_up_placeholder": "рдкреБрдвреАрд▓ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛ рдХрд┐рдВрд╡рд╛ рдирд╡реАрди рд▓рдХреНрд╖рдгреЗ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛...", "analysis_spinner": "рддреБрдордЪреНрдпрд╛ рд▓рдХреНрд╖рдгрд╛рдВрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...",
        "thinking_spinner": "рд╡рд┐рдЪрд╛рд░ рдХрд░рдд рдЖрд╣реЗ...", "follow_up_response": "рддреБрдореНрд╣реА рдЖрддрд╛ рдкреБрдвреАрд▓ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░реВ рд╢рдХрддрд╛, рдХрд┐рдВрд╡рд╛ рд╕рд╛рдЗрдбрдмрд╛рд░рдордзреВрди рд╕реНрдерд╛рди рдирд┐рд╡рдбреВрди *рдбреЙрдХреНрдЯрд░ рд╢реЛрдзрд╛* рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░реВ рд╢рдХрддрд╛.",
        "new_symptoms_info": "рдЕрд╕реЗ рджрд┐рд╕рддреЗ рдХреА рддреБрдореНрд╣реА рдирд╡реАрди рд▓рдХреНрд╖рдгреЗ рд╕рд╛рдВрдЧрдд рдЖрд╣рд╛рдд. рдореА рдирд╡реАрди рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕реБрд░реВ рдХрд░реЗрди.",
        "new_symptoms_response": "рддреБрдореНрд╣реА рдЖрддрд╛ рдкреБрдвреАрд▓ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░реВ рд╢рдХрддрд╛, рдХрд┐рдВрд╡рд╛ рд╕рд╛рдЗрдбрдмрд╛рд░ рд╡рд╛рдкрд░реВрди рдбреЙрдХреНрдЯрд░ рд╢реЛрдзреВ рд╢рдХрддрд╛.",
        "listening_info": "LANG рдордзреНрдпреЗ рдРрдХрдд рдЖрд╣реЗ... рдЖрддрд╛ рдмреЛрд▓рд╛!", "transcribing_spinner": "рддреБрдордЪрд╛ рдЖрд╡рд╛рдЬ рд▓рд┐рд╣рд┐рдд рдЖрд╣реЗ...",
        "listening_timeout_warning": "рдРрдХрдгреНрдпрд╛рдЪреА рд╡реЗрд│ рд╕рдВрдкрд▓реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.", "whisper_error_toast": "рд╡реНрд╣рд┐рд╕реНрдкрд░рд▓рд╛ рдСрдбрд┐рдУ рд╕рдордЬреВ рд╢рдХрд▓рд╛ рдирд╛рд╣реА.",
        "voice_error": "рд▓рд┐рдкреНрдпрдВрддрд░рдг рджрд░рдореНрдпрд╛рди рдПрдХ рддреНрд░реБрдЯреА рдЖрд▓реА: ERROR_MESSAGE", "toast_symptoms_first": "рдХреГрдкрдпрд╛ рдкреНрд░рдердо рдЪреЕрдЯрдордзреНрдпреЗ рддреБрдордЪреА рд▓рдХреНрд╖рдгреЗ рд╕рд╛рдВрдЧрд╛.",
        "toast_location_first": "рдХреГрдкрдпрд╛ рд╕рд╛рдЗрдбрдмрд╛рд░рдордзреВрди рдХрд┐рдорд╛рди рдПрдХ рд╕реНрдерд╛рди рдирд┐рд╡рдбрд╛.", "search_spinner": "LOCATIONS рдордзреНрдпреЗ SPECIALIZATIONs рд╢реЛрдзрдд рдЖрд╣реЗ...",
        "search_results_ok": "рдареАрдХ рдЖрд╣реЗ, рдпреЗрдереЗ LOCATIONS рдордзреАрд▓ рдХрд╛рд╣реА *SPECIALIZATIONs* рдЖрд╣реЗрдд:",
        "search_results_fail": "рдорд╛рдл рдХрд░рд╛, рдорд▓рд╛ рддреБрдордЪреНрдпрд╛ рдирд┐рдХрд╖рд╛рдВрд╢реА рдЬреБрд│рдгрд╛рд░реЗ рдирд┐рд╡рдбрд▓реЗрд▓реНрдпрд╛ рдард┐рдХрд╛рдгреА рдХреЛрдгрддреЗрд╣реА *SPECIALIZATIONs* рд╕рд╛рдкрдбрд▓реЗ рдирд╛рд╣реАрдд. рдХреГрдкрдпрд╛ рднрд┐рдиреНрди рдХреНрд╖реЗрддреНрд░реЗ рдХрд┐рдВрд╡рд╛ рдлрд┐рд▓реНрдЯрд░ рд╡рд╛рдкрд░реВрди рдкрд╣рд╛.",
        "disclaimer": "рдЕрд╕реНрд╡реАрдХрд░рдг: рд╣реЗ рд╡реИрджреНрдпрдХреАрдп рдирд┐рджрд╛рди рдирд╛рд╣реА.", "tip_1": "ЁЯТз рд╣рд╛рдпрдбреНрд░реЗрдЯреЗрдб рд░рд╣рд╛ рдЖрдгрд┐ рджрд░рд░реЛрдЬ рдХрд┐рдорд╛рди 2 рд▓рд┐рдЯрд░ рдкрд╛рдгреА рдкреНрдпрд╛.",
        "tip_2": "ЁЯШ┤ рдирд┐рд░реЛрдЧреА рд░реЛрдЧрдкреНрд░рддрд┐рдХрд╛рд░рд╢рдХреНрддреАрд╕рд╛рдареА 7-8 рддрд╛рд╕ рдЭреЛрдк рдШреНрдпрд╛.", "tip_3": "ЁЯПГтАНтЩА рдЖрдард╡рдбреНрдпрд╛рддреВрди 5 рджрд┐рд╡рд╕ рдХрд┐рдорд╛рди 30 рдорд┐рдирд┐рдЯреЗ рд╡реНрдпрд╛рдпрд╛рдо рдХрд░рд╛.",
        "tip_4": "ЁЯз╝ рд╕рдВрд╕рд░реНрдЧ рдЯрд╛рд│рдгреНрдпрд╛рд╕рд╛рдареА рд╡рд╛рд░рдВрд╡рд╛рд░ рд╣рд╛рдд рдзреБрд╡рд╛.", "tip_5": "ЁЯеЧ рд░реЛрдЧрдкреНрд░рддрд┐рдХрд╛рд░рд╢рдХреНрддреА рд╡рд╛рдврд╡рдгреНрдпрд╛рд╕рд╛рдареА рдЕрдзрд┐рдХ рдлрд│реЗ рдЖрдгрд┐ рднрд╛рдЬреНрдпрд╛ рдЦрд╛.",
        "tip_6": "ЁЯЪн рдзреВрдореНрд░рдкрд╛рди рдЯрд╛рд│рд╛ рдЖрдгрд┐ рдорджреНрдпрдкрд╛рди рдорд░реНрдпрд╛рджрд┐рдд рдХрд░рд╛.", "tip_7": "ЁЯзШтАНтЩА рдзреНрдпрд╛рдирд╛рд╕рд╛рд░рдЦреНрдпрд╛ рддрдгрд╛рд╡ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди рддрдВрддреНрд░рд╛рдВрдЪрд╛ рд╕рд░рд╛рд╡ рдХрд░рд╛.",
        "tip_8": "тША рд╡реНрд╣рд┐рдЯреЕрдорд┐рди рдбреА рд╕рдВрд╢реНрд▓реЗрд╖рдгрд╛рд╕рд╛рдареА рдкреБрд░реЗрд╢реА рд╕реВрд░реНрдпрдкреНрд░рдХрд╛рд╢ рдШреНрдпрд╛.", "tip_9": "ЁЯПе рдирд┐рдпрдорд┐рдд рдЖрд░реЛрдЧреНрдп рддрдкрд╛рд╕рдгреА рдЖрдгрд┐ рд╕реНрдХреНрд░реАрдирд┐рдВрдЧ рдХрд░рд╛.",
        "tip_10": "ЁЯТК рддреБрдордЪреНрдпрд╛ рдбреЙрдХреНрдЯрд░рд╛рдВрдиреА рд╕рд╛рдВрдЧрд┐рддрд▓реНрдпрд╛рдкреНрд░рдорд╛рдгреЗ рдФрд╖рдзреЗ рдШреНрдпрд╛.", "doc_hospital": "рд░реБрдЧреНрдгрд╛рд▓рдп/рдХреНрд▓рд┐рдирд┐рдХ", "doc_qualifications": "рдкрд╛рддреНрд░рддрд╛",
        "doc_availability": "рдЙрдкрд▓рдмреНрдзрддрд╛", "doc_contact": "рд╕рдВрдкрд░реНрдХ"
    }
}


# --- SESSION STATE INITIALIZATION ---
def initialize_session_state():
    """Initializes session state for the conversation."""
    if 'lang' not in st.session_state:
        st.session_state.lang = 'en'
    if 'messages' not in st.session_state:
        st.session_state.messages = [{"role": "assistant", "content": translations[st.session_state.lang]['initial_message']}]
    if 'conversation_stage' not in st.session_state:
        st.session_state.conversation_stage = "awaiting_symptoms"
    if 'specialization' not in st.session_state:
        st.session_state.specialization = ""
    if 'tip_index' not in st.session_state:
        st.session_state.tip_index = 0

initialize_session_state()
t = translations[st.session_state.lang]

# --- UI Language Selector ---
col1, col2 = st.columns([0.8, 0.2])
with col1:
    st.title(t['title'])
with col2:
    lang_map = {'en': 'English', 'hi': 'рд╣рд┐рдВрджреА (Hindi)', 'mr': 'рдорд░рд╛рдареА (Marathi)'}
    current_lang_name = lang_map.get(st.session_state.lang, 'English')
    selected_lang_name = st.selectbox("Language", options=list(lang_map.values()), index=list(lang_map.values()).index(current_lang_name), label_visibility="collapsed")
    selected_lang_code = [code for code, name in lang_map.items() if name == selected_lang_name][0]

    if st.session_state.lang != selected_lang_code:
        st.session_state.lang = selected_lang_code
        st.session_state.messages = [] # Clear messages on lang change
        st.rerun()

st.subheader(t['write'])

# --- SIDEBAR FOR USER INFO & FILTERS ---
with st.sidebar:
    st.header(t['sidebar_your_info'])
    age = st.number_input(t['age'], min_value=0, max_value=120, step=1, key='user_age')
    gender = st.selectbox(t['gender'], t['gender_options'], key='user_gender')
    
    st.header(t['sidebar_filters'])
    accepts_insurance = st.checkbox(t['insurance_checkbox'], key='accepts_insurance')
    
    st.header(t['sidebar_find_doctor'])
    location_selector = st.empty()
    find_doctors_button = st.button(t['find_doctors_button'], key='find_doctors_button')
    
    st.header(t['sidebar_voice_input'])
    language = st.selectbox(t['voice_language_select'], ["english", "hindi", "marathi", "spanish", "french", "german"], key='voice_language')
    
    st.divider()

    st.header(t['health_corner'])
    health_tips = [t[f'tip_{i}'] for i in range(1, 11)]
    current_tip = health_tips[st.session_state.tip_index % len(health_tips)]
    st.info(f"{t['health_tip']} {current_tip}")
    if st.button(t['next_tip_button']):
        st.session_state.tip_index += 1
        st.rerun()
    
    if st.button(t['emergency_button']):
        st.sidebar.warning(t['emergency_info'])

    st.divider()
    chat_history = "\n".join([f"{m['role'].capitalize()}: {m['content']}" for m in st.session_state.messages])
    st.download_button(t['download_chat_button'], chat_history, file_name="chat_history.txt")

# --- RESOURCE LOADING ---
@st.cache_resource
def get_llm():
    return Ollama(model="phi3:mini", base_url="http://localhost:11434")

@st.cache_data
def load_doctor_data():
    try:
        df = pd.read_csv('C:\\Users\\rguja\\OneDrive\\Documents\\LY\\healthChatBot\\doctors2_data.csv', encoding="ISO-8859-1")
        df['Location'] = df['Location'].str.strip().str.title()
        return df
    except FileNotFoundError:
        st.error("doctors2_data.csv file not found.")
        return None

if 'resources_loaded' not in st.session_state:
    with st.spinner(t['init_spinner']):
        st.session_state.llm = get_llm()
        st.session_state.doctors_df = load_doctor_data()
        st.session_state.resources_loaded = True
        st.toast(t['init_toast'])

llm = st.session_state.llm
doctors_df = st.session_state.doctors_df

if doctors_df is not None:
    locations = sorted(doctors_df['Location'].unique().tolist())
    location_selector.multiselect(t['location_select'], options=locations, key='selected_locations')

# --- CORE LOGIC ---
def analyze_symptoms_and_extract_specialist(symptoms, user_info):
    if doctors_df is not None and not doctors_df.empty:
        available_specializations = doctors_df['Specialization'].unique().tolist()
        user_context = f"A {user_info['age']}-year-old {user_info['gender']} user"
        if user_info['age'] == 0 or user_info['gender'] == 'Not specified':
            user_context = "A user"
        prompt = (
            f"{user_context} has the following symptoms: '{symptoms}'.\n\n"
            f"Your response MUST start with the single most relevant medical specialization from this list: {available_specializations}.\n\n"
            "After stating the specialization, provide a brief (under 120 words) explanation covering:\n"
            "- *Immediate Self-Care:* Bulleted list of actions.\n"
            "- *When to See a Doctor:* Bulleted list of red flags.\n"
            "- *General Advice:* Broader health advice."
        )
        try:
            conversational_response = llm.invoke(prompt)
            found_specialization = "General Medicine"
            for spec in available_specializations:
                if re.search(r'\b' + re.escape(spec) + r'\b', conversational_response, re.IGNORECASE):
                    found_specialization = spec
                    break
            return {"full_response": conversational_response, "specialization": found_specialization}
        except Exception as e:
            st.error(f"Could not connect to the language model: {e}")
            return {"full_response": "I encountered an error.", "specialization": "General Medicine"}
    return {"full_response": "Doctor data not loaded.", "specialization": "General Medicine"}

def find_doctors(specialization, locations, df, accepts_insurance=False):
    if df is not None and locations:
        title_case_locations = [loc.strip().title() for loc in locations]
        matches = df[(df['Specialization'].str.lower() == specialization.lower()) & (df['Location'].isin(title_case_locations))]
        if accepts_insurance:
            matches = matches[matches['Insurance'] == 1]
        return matches
    return pd.DataFrame()

def listen_and_transcribe(lang="english"):
    recognizer = sr.Recognizer()
    try:
        with sr.Microphone() as source:
            status_placeholder = st.empty()
            listening_text = t['listening_info'].replace("LANG", lang)
            status_placeholder.info(listening_text)
            recognizer.adjust_for_ambient_noise(source)
            audio_data = recognizer.listen(source, timeout=5, phrase_time_limit=15)
            status_placeholder.empty()

        with st.spinner(t['transcribing_spinner']):
            text = recognizer.recognize_whisper(audio_data, language=lang, model="base")
        return text
    except sr.WaitTimeoutError:
        status_placeholder.warning(t['listening_timeout_warning'])
        return None
    except sr.UnknownValueError:
        st.toast(t['whisper_error_toast'], icon="ЁЯдФ")
        return None
    except Exception as e:
        error_text = t['voice_error'].replace("ERROR_MESSAGE", str(e))
        st.error(error_text)
        return None

# --- UI AND CONVERSATION FLOW ---
def handle_prompt(prompt_text):
    st.session_state.messages.append({"role": "user", "content": prompt_text})
    
    prompt_for_model = prompt_text
    if st.session_state.lang != 'en':
        prompt_for_model = GoogleTranslator(source=st.session_state.lang, target='en').translate(prompt_text)

    if st.session_state.conversation_stage == "awaiting_symptoms":
        with st.spinner(t['analysis_spinner']):
            user_info = {"age": st.session_state.user_age, "gender": st.session_state.user_gender}
            analysis = analyze_symptoms_and_extract_specialist(prompt_for_model, user_info)
            full_response_text = analysis.get("full_response", "Based on your symptoms...")
            specialization = analysis.get("specialization", "General Medicine")
        st.session_state.specialization = specialization
        
        response = full_response_text
        if st.session_state.lang != 'en':
            response = GoogleTranslator(source='en', target=st.session_state.lang).translate(full_response_text)

        response = f"{response}\n\n{t['follow_up_response']}"
        st.session_state.conversation_stage = "awaiting_doctor_search"
    
    elif st.session_state.conversation_stage == "awaiting_doctor_search":
        with st.spinner(t['thinking_spinner']):
            if len(prompt_for_model.split()) > 5:
                 st.info(t['new_symptoms_info'])
                 user_info = {"age": st.session_state.user_age, "gender": st.session_state.user_gender}
                 analysis = analyze_symptoms_and_extract_specialist(prompt_for_model, user_info)
                 full_response_text = analysis.get("full_response", "Based on your symptoms...")
                 specialization = analysis.get("specialization", "General Medicine")
                 st.session_state.specialization = specialization
                 
                 response = full_response_text
                 if st.session_state.lang != 'en':
                     response = GoogleTranslator(source='en', target=st.session_state.lang).translate(full_response_text)

                 response = f"{response}\n\n{t['new_symptoms_response']}"
            else:
                follow_up_prompt = f"The user has a follow-up question: '{prompt_for_model}'. Provide a concise and helpful answer in under 80 words."
                response = llm.invoke(follow_up_prompt)
                if st.session_state.lang != 'en':
                    response = GoogleTranslator(source='en', target=st.session_state.lang).translate(response)

    st.session_state.messages.append({"role": "assistant", "content": response})
    st.rerun()

# Display chat messages from history
if not st.session_state.messages:
     st.session_state.messages = [{"role": "assistant", "content": t['initial_message']}]

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

chat_input_placeholder = t['symptoms_placeholder']
if st.session_state.conversation_stage == "awaiting_doctor_search":
    chat_input_placeholder = t['follow_up_placeholder']

col1, col2 = st.columns([8, 1])
with col1:
    if prompt := st.chat_input(chat_input_placeholder, key="chat_box"):
        handle_prompt(prompt)
with col2:
    st.write("")
    st.write("")
    if st.button("ЁЯОд", key="voice_button"):
        transcribed_text = listen_and_transcribe(lang=st.session_state.voice_language)
        if transcribed_text:
            handle_prompt(transcribed_text)

if find_doctors_button:
    specialization = st.session_state.get('specialization')
    locations = st.session_state.get('selected_locations')
    insurance_filter = st.session_state.get('accepts_insurance', False)

    if not specialization:
        st.toast(t['toast_symptoms_first'], icon="тД╣")
    elif not locations:
        st.toast(t['toast_location_first'], icon="ЁЯУН")
    else:
        display_spec = specialization
        display_locs = ', '.join(locations)
        translator = GoogleTranslator(source='en', target=st.session_state.lang)
        if st.session_state.lang != 'en':
            display_spec = translator.translate(specialization)
            display_locs = translator.translate(', '.join(locations))

        spinner_text = t['search_spinner'].replace("SPECIALIZATION", display_spec).replace("LOCATIONS", display_locs)
        with st.spinner(spinner_text):
            recommended_doctors = find_doctors(specialization, locations, doctors_df, accepts_insurance=insurance_filter)
        
        if not recommended_doctors.empty:
            contact_col = 'Contact_no' if 'Contact_no' in recommended_doctors.columns else 'Contact'
            response = t['search_results_ok'].replace("SPECIALIZATION", display_spec).replace("LOCATIONS", display_locs) + "\n\n"
            
            for index, row in recommended_doctors.iterrows():
                name = row['Name']
                hospital = row['Hospital/Clinic']
                quals = row['Qualifications']
                if st.session_state.lang != 'en':
                    translated_details = [translator.translate(item) for item in [name, hospital, quals] if pd.notna(item)]
                    name, hospital, quals = translated_details[0], translated_details[1], translated_details[2]

                response += (
                    f"- *{name}*\n"
                    f"  - *{t['doc_hospital']}:* {hospital},{row['Location']} \n"
                    f"  - *{t['doc_qualifications']}:* {quals}\n"
                    f"  - *{t['doc_availability']}:* {row['Availability']}\n"
                    f"  - *{t['doc_contact']}:* {row[contact_col]}\n\n"
                )
            response += f"\n{t['disclaimer']}"
        else:
            response = t['search_results_fail'].replace("SPECIALIZATION", display_spec)
        
        st.session_state.messages.append({"role": "assistant", "content": response})
        st.session_state.conversation_stage = "awaiting_symptoms"
        st.session_state.specialization = ""
  ┬а┬а┬а┬а┬а┬аst.rerun()
